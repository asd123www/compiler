// use std::str::FromStr;
use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
    // 跳过空白符和注释
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^\n\r]*[\n\r]*\*/" => {},
    // 剩下的情况采用默认方式处理
    _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = {
    <func_def: FuncDef> => CompUnit{func_def},
}

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = {
    "{" <stmt: Stmt> "}" => Block {stmt: stmt},
}

Stmt: Stmt = {
    "return" <exp: Exp> ";" => Stmt {exp},
}


// LOrExp
Exp: Exp = {
    <lorexp: LOrExp> => Exp{lorexp},
}


// PrimaryExp  ::= "(" Exp ")" | Number;
PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::exp(Box::new(exp)),
    <num: Number> => PrimaryExp::num(num),
}


// UnaryExp    ::= PrimaryExp | UnaryOp UnaryExp;
UnaryExp: UnaryExp = {
    <primaryexp: PrimaryExp> => UnaryExp::primaryexp(primaryexp),
    <unaryop: UnaryOp> <unaryexp: UnaryExp> => UnaryExp::unaryexp(unaryop, Box::new(unaryexp)), 
}

// UnaryOp     ::= "+" | "-" | "!";
UnaryOp: UnaryOp = {
    "+" => UnaryOp::Add,
    "-" => UnaryOp::Sub,
    "!" => UnaryOp::Exclamation,
}

// MulExp      ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
MulExp: MulExp = {
    <unaryexp: UnaryExp> => MulExp::unaryexp(unaryexp),
    <mulexp: MulExp> "*" <unaryexp: UnaryExp> => MulExp::mulexp(Box::new(mulexp), unaryexp),
    <mulexp: MulExp> "/" <unaryexp: UnaryExp> => MulExp::divexp(Box::new(mulexp), unaryexp),
    <mulexp: MulExp> "%" <unaryexp: UnaryExp> => MulExp::modexp(Box::new(mulexp), unaryexp),
}

// AddExp      ::= MulExp | AddExp ("+" | "-") MulExp;
AddExp: AddExp = {
    <mulexp: MulExp> => AddExp::mulexp(mulexp),
    <addexp: AddExp> "+" <mulexp: MulExp> => AddExp::addexp(Box::new(addexp), mulexp),
    <addexp: AddExp> "-" <mulexp: MulExp> => AddExp::subexp(Box::new(addexp), mulexp),
}

// RelExp      ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
RelExp: RelExp = {
    <addexp: AddExp> => RelExp::addexp(addexp),
    <relexp: RelExp> "<" <addexp: AddExp>  => RelExp::ltexp(Box::new(relexp), addexp),
    <relexp: RelExp> ">" <addexp: AddExp>  => RelExp::gtexp(Box::new(relexp), addexp),
    <relexp: RelExp> "<=" <addexp: AddExp> => RelExp::leexp(Box::new(relexp), addexp),
    <relexp: RelExp> ">=" <addexp: AddExp> => RelExp::geexp(Box::new(relexp), addexp),
}

// EqExp       ::= RelExp | EqExp ("==" | "!=") RelExp;
EqExp: EqExp = {
    <relexp: RelExp> => EqExp::relexp(relexp),
    <eqexp: EqExp> "==" <relexp: RelExp> => EqExp::eqexp(Box::new(eqexp), relexp),
    <eqexp: EqExp> "!=" <relexp: RelExp> => EqExp::neqexp(Box::new(eqexp), relexp),
}

// LAndExp     ::= EqExp | LAndExp "&&" EqExp;
LAndExp: LAndExp = {
    <eqexp: EqExp> => LAndExp::eqexp(eqexp),
    <landexp: LAndExp> "&&" <eqexp: EqExp> => LAndExp::andexp(Box::new(landexp), eqexp),
}

// LOrExp      ::= LAndExp | LOrExp "||" LAndExp;
LOrExp: LOrExp = {
    <landexp: LAndExp> => LOrExp::landexp(landexp),
    <lorexp: LOrExp> "||" <landexp: LAndExp> => LOrExp::orexp(Box::new(lorexp), landexp),
}

// Number      ::= INT_CONST;
Number: i32 = <num: IntConst> => <>;


// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();


// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}